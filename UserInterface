package pokedexSystem;

import java.awt.*;
import java.awt.event.*;
import java.util.*;

import javax.swing.*;
import java.util.stream.IntStream;

public class UserInterface {
	private static POKEDEX PDex;
	private static JFrame frame;
	private static int Stat;
	private static Pokemon PkAry[];
	public static Search searchf;

	public UserInterface(POKEDEX dex){
		PDex = dex;
		searchf = new Search();
		frame = new JFrame("Pokédex");
		Frame();
	}
	

	
	// Erstellt ein String-Array mit Nummern von "ID" und Nummern von 1 bis 151
	private static String[] NumberList() {
		int intAry[] = IntStream.range(0,152).toArray();
        String[] strArray = new String[intAry.length];
        strArray[0] = "ID";
        for (int i = 1; i < intAry.length; i++) {
            strArray[i] = String.valueOf(intAry[i]);
        }
        return strArray;
	}
	
	// Erstellt eine String-Array von allen Attributen, füllt die Daten jedes Pokemon ein, und gibt dieses aus
	private static String[] AttributeList(String a, Pokemon[] ary) {
		String NameList[] = new String[152];
		String HPList[] = new String[152];
		String ATKList[] = new String[152];
		String DEFList[] = new String[152];
		String SPATKList[] = new String[152];
		String SPDEFList[] = new String[152];
		String SPDList[] = new String[152];
		String TypeList[] = new String[152];
		String Type2List[] = new String[152];
		String IDList[] = new String[152];
		
		//Auswahl welches Array gefüllt wird
		switch(a) {
		case "Name":
			NameList[0] = "Name";
			for(int i = 1; i < 152; i++) {
				NameList[i] = ary[i-1].giveName();
			}
			return NameList;
		case "HP":
			HPList[0] = "HP";
			for(int i = 1; i < 152; i++) {
				HPList[i] = Integer.toString(ary[i-1].giveStat(0));
			}
			return HPList;
		case "ATK":
			ATKList[0] = "ATK";
			for(int i = 1; i < 152; i++) {
				ATKList[i] = Integer.toString(ary[i-1].giveStat(1));
			}
			return ATKList;
		case "DEF":
			DEFList[0] = "DEF";
			for(int i = 1; i < 152; i++) {
				DEFList[i] = Integer.toString(ary[i-1].giveStat(2));
			}
			return DEFList;
		case "SP-ATK":
			SPATKList[0] = "SP-ATK";
			for(int i = 1; i < 152; i++) {
				SPATKList[i] = Integer.toString(ary[i-1].giveStat(3));
			}
			return SPATKList;
		case "SP-DEF":
			SPDEFList[0] = "SP-DEF";
			for(int i = 1; i < 152; i++) {
				SPDEFList[i] = Integer.toString(ary[i-1].giveStat(4));
			}
			return SPDEFList;
		case "SPD":
			SPDList[0] = "SPD";
			for(int i = 1; i < 152; i++) {
				SPDList[i] = Integer.toString(ary[i-1].giveStat(5));
			}
			return SPDList;
		case "TYPE":
			TypeList[0] = "Typing";
			for(int i = 1; i < 152; i++) {
				TypeList[i] = ary[i-1].giveTypeName(ary[i-1].giveType1());
			}
			return TypeList;
		case "TYPE2":
			Type2List[0] = " ";
			for(int i = 1; i < 152; i++) {
				if(ary[i-1].hasTwoTypes()) {
					Type2List[i] = ary[i-1].giveTypeName(ary[i-1].giveType2());
				}
				else {
					Type2List[i] = " ";
				}
			}
			return Type2List;
		case "ID":
			IDList[0] = "ID";
			for(int i = 1; i < 152; i++) {
				IDList[i] = Integer.toString(ary[i-1].giveStat(6));
			}
			return IDList;
		default:
			return null;
		}
	}
//	Erstellt die Programmgrafik
	private static void Frame() {
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		double width = screenSize.getWidth();
		double height = screenSize.getHeight();
		
//		Fenster wird eingestellt
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize((int) Math.round(508),(int) Math.round(822));
		frame.setResizable(false);
		
//		Display-felder werden erstellt
		JPanel panel = new JPanel();
		JPanel leftpanel = new JPanel();
		JPanel listpanel = new JPanel();
		JPanel listpanel1 = new JPanel();
		JPanel listpanel2 = new JPanel();
		JPanel listpanel3 = new JPanel();
		JPanel listpanel4 = new JPanel();
		JScrollPane scroll = new JScrollPane(listpanel);
		


		
//		Listen von Attributen werden erstellt
		JList pokelist = new JList(NumberList());
		
		JList namelist = new JList(AttributeList("Name", PDex.PokeArray()));
		JList hplist = new JList(AttributeList("HP", PDex.PokeArray()));
		JList atklist = new JList(AttributeList("ATK", PDex.PokeArray()));
		JList deflist = new JList(AttributeList("DEF", PDex.PokeArray()));
		JList satklist = new JList(AttributeList("SP-ATK", PDex.PokeArray()));
		JList sdeflist = new JList(AttributeList("SP-DEF", PDex.PokeArray()));
		JList spdlist = new JList(AttributeList("SPD", PDex.PokeArray()));
		JList typelist = new JList(AttributeList("TYPE", PDex.PokeArray()));
		JList type2list = new JList(AttributeList("TYPE2", PDex.PokeArray()));
		
//		Sortierparameter-Auswahlbox wird erstellt
		String[] ParaList = {"HP", "ATK", "DEF", "SP-ATK", "SP-DEF", "SPD","ID"};
		JComboBox parameters = new JComboBox(ParaList);
		parameters.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				//Auswahl wird registriert
				String ent = e.getItem().toString();
				Stat = Arrays.asList(ParaList).indexOf(ent);
				
			}

		});
		
//		Suchleiste wird erstellt
		JTextField searchbar = new JTextField(null, 25);
		frame.setVisible(true);
		
//		Knöpfe werden erstellt
		JButton search = new JButton("OK");
		search.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e) {
			// Pokemon werden nach ähnlichkeit zum suchbegriff sortiert
				PKary = PDex.PokeArray();
				PDex.getSort().searchquickSirt(PKary, searchbar.getText(), 0, 150);
				Collections.reverse(Arrays.asList(PkAry));

			// Arrays werden neu eingefügt
					JList pokelist = new JList(AttributeList("ID", PKary));				
					JList namelist = new JList(AttributeList("Name", PKary));
					JList hplist = new JList(AttributeList("HP", PKary));
					JList atklist = new JList(AttributeList("ATK", PKary));
					JList deflist = new JList(AttributeList("DEF", PKary));
					JList satklist = new JList(AttributeList("SP-ATK", PKary));
					JList sdeflist = new JList(AttributeList("SP-DEF", PKary));
					JList spdlist = new JList(AttributeList("SPD", PKary));
					JList typelist = new JList(AttributeList("TYPE", PKary));
					JList type2list = new JList(AttributeList("TYPE2", PKary));
					
					listpanel.removeAll();
					listpanel1.removeAll();
					listpanel2.removeAll();
					listpanel3.removeAll();
					listpanel4.removeAll();
					
					listpanel.add(BorderLayout.LINE_START, pokelist);
					listpanel.add(BorderLayout.CENTER, listpanel1);
					listpanel.add(BorderLayout.EAST, listpanel2);
					listpanel1.add(BorderLayout.WEST, namelist);
					listpanel1.add(BorderLayout.CENTER, hplist);
					listpanel1.add(BorderLayout.EAST, atklist);
					listpanel2.add(BorderLayout.WEST, deflist);
					listpanel2.add(BorderLayout.CENTER, satklist);
					listpanel2.add(BorderLayout.EAST, listpanel3);
					listpanel3.add(BorderLayout.WEST, sdeflist);
					listpanel3.add(BorderLayout.CENTER, listpanel4);
					listpanel4.add(BorderLayout.WEST, spdlist);
					listpanel4.add(BorderLayout.CENTER, typelist);
					listpanel4.add(BorderLayout.EAST, type2list);
					SwingUtilities.updateComponentTreeUI(frame);

			}
			
		});
		
		JButton sort = new JButton("Sort");
		sort.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PkAry = PDex.PokeArray();
				if(Stat < 6) {
					// Array with sortiert
					PDex.getSort().quickSort(PkAry, Stat, 0, 150);
					Collections.reverse(Arrays.asList(PkAry));
				}
				// Arrays werden neu eingefügt
					JList pokelist = new JList(AttributeList("ID", PkAry));				
					JList namelist = new JList(AttributeList("Name", PkAry));
					JList hplist = new JList(AttributeList("HP", PkAry));
					JList atklist = new JList(AttributeList("ATK", PkAry));
					JList deflist = new JList(AttributeList("DEF", PkAry));
					JList satklist = new JList(AttributeList("SP-ATK", PkAry));
					JList sdeflist = new JList(AttributeList("SP-DEF", PkAry));
					JList spdlist = new JList(AttributeList("SPD", PkAry));
					JList typelist = new JList(AttributeList("TYPE", PkAry));
					JList type2list = new JList(AttributeList("TYPE2", PkAry));
					
					listpanel.removeAll();
					listpanel1.removeAll();
					listpanel2.removeAll();
					listpanel3.removeAll();
					listpanel4.removeAll();
					
					listpanel.add(BorderLayout.LINE_START, pokelist);
					listpanel.add(BorderLayout.CENTER, listpanel1);
					listpanel.add(BorderLayout.EAST, listpanel2);
					listpanel1.add(BorderLayout.WEST, namelist);
					listpanel1.add(BorderLayout.CENTER, hplist);
					listpanel1.add(BorderLayout.EAST, atklist);
					listpanel2.add(BorderLayout.WEST, deflist);
					listpanel2.add(BorderLayout.CENTER, satklist);
					listpanel2.add(BorderLayout.EAST, listpanel3);
					listpanel3.add(BorderLayout.WEST, sdeflist);
					listpanel3.add(BorderLayout.CENTER, listpanel4);
					listpanel4.add(BorderLayout.WEST, spdlist);
					listpanel4.add(BorderLayout.CENTER, typelist);
					listpanel4.add(BorderLayout.EAST, type2list);
					SwingUtilities.updateComponentTreeUI(frame);

			}

		});
		

		
//		Display-felder werden gefüllt
		// Obere Leiste
		leftpanel.add(BorderLayout.WEST, parameters);
		leftpanel.add(BorderLayout.EAST, sort);
		panel.add(BorderLayout.LINE_START, leftpanel);
		panel.add(BorderLayout.CENTER, searchbar);
		panel.add(BorderLayout.LINE_END, search);
		// Pokemon Liste
		listpanel.add(BorderLayout.LINE_START, pokelist);
		listpanel.add(BorderLayout.CENTER, listpanel1);
		listpanel.add(BorderLayout.EAST, listpanel2);
		listpanel1.add(BorderLayout.WEST, namelist);
		listpanel1.add(BorderLayout.CENTER, hplist);
		listpanel1.add(BorderLayout.EAST, atklist);
		listpanel2.add(BorderLayout.WEST, deflist);
		listpanel2.add(BorderLayout.CENTER, satklist);
		listpanel2.add(BorderLayout.EAST, listpanel3);
		listpanel3.add(BorderLayout.WEST, sdeflist);
		listpanel3.add(BorderLayout.CENTER, listpanel4);
		listpanel4.add(BorderLayout.WEST, spdlist);
		listpanel4.add(BorderLayout.CENTER, typelist);
		listpanel4.add(BorderLayout.EAST, type2list);		
		
//		Display-felder werden ins Fenster eingefügt
		frame.add(BorderLayout.PAGE_START, panel);
		frame.add(BorderLayout.CENTER, scroll);
		
	}
	
	public static void close() {
		frame.dispose();
	}
}
